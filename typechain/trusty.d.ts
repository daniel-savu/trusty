/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface trustyInterface extends Interface {
  functions: {
    addProtocol: TypedFunctionDescription<{
      encode([
        protocol,
        contracts,
        layers,
        layerFactors,
        layerLowerBounds,
        layerUpperBounds,
        minCollateral,
        actions,
        actionRewards
      ]: [
        string,
        string[],
        BigNumberish[],
        BigNumberish[],
        BigNumberish[],
        BigNumberish[],
        BigNumberish,
        BigNumberish[],
        BigNumberish[]
      ]): string;
    }>;

    setContracts: TypedFunctionDescription<{
      encode([protocol, contracts]: [string, string[]]): string;
    }>;

    proxy: TypedFunctionDescription<{
      encode([implementation, params]: [string, Arrayish]): string;
    }>;
  };

  events: {};
}

export class trusty extends Contract {
  connect(signerOrProvider: Signer | Provider | string): trusty;
  attach(addressOrName: string): trusty;
  deployed(): Promise<trusty>;

  on(event: EventFilter | string, listener: Listener): trusty;
  once(event: EventFilter | string, listener: Listener): trusty;
  addListener(eventName: EventFilter | string, listener: Listener): trusty;
  removeAllListeners(eventName: EventFilter | string): trusty;
  removeListener(eventName: any, listener: Listener): trusty;

  interface: trustyInterface;

  functions: {
    addProtocol(
      protocol: string,
      contracts: string[],
      layers: BigNumberish[],
      layerFactors: BigNumberish[],
      layerLowerBounds: BigNumberish[],
      layerUpperBounds: BigNumberish[],
      minCollateral: BigNumberish,
      actions: BigNumberish[],
      actionRewards: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setContracts(
      protocol: string,
      contracts: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    proxy(
      implementation: string,
      params: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  addProtocol(
    protocol: string,
    contracts: string[],
    layers: BigNumberish[],
    layerFactors: BigNumberish[],
    layerLowerBounds: BigNumberish[],
    layerUpperBounds: BigNumberish[],
    minCollateral: BigNumberish,
    actions: BigNumberish[],
    actionRewards: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setContracts(
    protocol: string,
    contracts: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  proxy(
    implementation: string,
    params: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    addProtocol(
      protocol: string,
      contracts: string[],
      layers: BigNumberish[],
      layerFactors: BigNumberish[],
      layerLowerBounds: BigNumberish[],
      layerUpperBounds: BigNumberish[],
      minCollateral: BigNumberish,
      actions: BigNumberish[],
      actionRewards: BigNumberish[]
    ): Promise<BigNumber>;

    setContracts(protocol: string, contracts: string[]): Promise<BigNumber>;

    proxy(implementation: string, params: Arrayish): Promise<BigNumber>;
  };
}
